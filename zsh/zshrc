autoload -U bashcompinit
bashcompinit
setopt incappendhistory autocd extendedglob
unsetopt beep nomatch notify
setopt prompt_subst
setopt NO_HUP

# Disable c-s hanging of terminal
stty -ixon

# Bindings
bindkey '^p' up-history
bindkey '^n' down-history
bindkey '^?' backward-delete-char
bindkey '^d' delete-char
bindkey '^[d' delete-word
bindkey '^y' yank
bindkey '^w' backward-kill-word
bindkey '^b' backward-char
bindkey '^[b' backward-word
bindkey '^f' forward-char
bindkey '^[f' forward-word
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

# Visual mode fixes
export KEYTIMEOUT=1

#Configurations
conf() {
  cd $HOME/workspace/nixfiles
  f=$(fd -t f . | fzf)
  sha1=$(sha1sum $f | awk '{print $1}')
  nvim $f
  newsha1=$(sha1sum $f | awk '{print $1}')
  test $sha1 != $newsha1 && home-manager switch
  cd - 1>/dev/null
}

# Base16 Shell
. "$HOME/.local/bin/base16-theme.sh"

# forgit
if [ ! -f $ZDOTDIR/forgit/forgit.plugin.zsh ]; then
  git clone https://github.com/wfxr/forgit $ZDOTDIR/forgit/
fi
source $ZDOTDIR/forgit/forgit.plugin.zsh

# Vim mode improvements
export KEYTIMEOUT=10
bindkey -M viins 'jk' vi-cmd-mode


# Notes
export NOTES_DIR=$XDG_DATA_HOME/notes
export ZETTEL_DIR=$NOTES_DIR/zettelkasten

# pipenv
export PIPENV_VENV_IN_PROJECT=1

function preexec() {
    _tmux_update_env
    _update_agents
}

export DO_NOT_TRACK=1

#pyright
export PYRIGHT_PYTHON_IGNORE_WARNINGS=1

# Lazy-loading completion
if [ $commands[bw] ]; then
  bw() {
    unfunction "$0"
    eval "$(bw completion --shell zsh); compdef _bw bw;"
    $0 "$@"
  }
fi
if [ $commands[klog] ]; then
  klog() {
    unfunction "$0"
    source <(klog completion -c zsh)
    $0 "$@"
  }
fi
if [ $commands[pipenv] ]; then
  pipenv() {
    unfunction "$0"
    eval "$(_PIPENV_COMPLETE=zsh_source pipenv)"
    $0 "$@"
  }
fi
if [ $commands[pip] ]; then
  pip() {
    unfunction "$0"
    eval "$(pip completion --zsh)"
    $0 "$@"
  }
fi

if [ $commands[jj] ]; then
  jj() {
    unfunction "$0"
    source <(COMPLETE=zsh jj)
    $0 "$@"
  }
fi


if [ $commands[uv] ]; then
  uv() {
    unfunction "$0"
    eval "$(uv --generate-shell-completion zsh)"
    $0 "$@"
  }
fi

if [ $commands[tinty] ]; then
  tinty() {
    unfunction "$0"
    eval "$(tinty generate-completion zsh)"
    $0 "$@"
  }
fi

if [ $commands[capbak] ]; then
  capbak() {
    unfunction "$0"
    eval "$(capbak completion)"
    $0 "$@"
  }
fi


if [ $commands[kubectl] ]; then
  kubectl() {
    unfunction "$0"
    eval "$(kubectl completion zsh)"
    $0 "$@"
  }
fi

# Tinty isn't able to apply environment variables to your shell due to
# the way shell sub-processes work. This is a work around by running
# Tinty through a function and then executing the shell scripts.
tinty_source_shell_theme() {
	newer_file=$(mktemp)
	tinty $@
	subcommand="$1"

	if [ "$subcommand" = "apply" ] || [ "$subcommand" = "init" ]; then
		tinty_data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/tinted-theming/tinty"

		while read -r script; do
			# shellcheck disable=SC1090
			. "$script"
		done < <(find "$tinty_data_dir" -maxdepth 1 -type f -name "*.sh" -newer "$newer_file")

		unset tinty_data_dir
	fi

	unset subcommand
}

if [ -n "$(command -v 'tinty')" ]; then
	tinty_source_shell_theme "init" > /dev/null

	alias tinty=tinty_source_shell_theme
fi

#----Machine-specific----
test -f $ZDOTDIR/machine_specific && source $ZDOTDIR/machine_specific
