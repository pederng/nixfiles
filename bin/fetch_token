#!/bin/env python

from pathlib import Path
from urllib.parse import urlencode
from typing import Tuple
import time
import os
import json
import sys

import requests

CACHE = Path(os.getenv("XDG_CACHE_HOME", os.path.expanduser("~/.cache"))) / "gmail_tokens"
SCOPE = "https://mail.google.com"
CREDENTIALS = json.loads((CACHE / "client_credentials").read_text())["installed"]


def auth_uri() -> str:
    params = dict(
        client_id=CREDENTIALS["client_id"],
        redirect_uri=CREDENTIALS["redirect_uris"][0],
        scope=SCOPE,
        access_type="offline",
        include_granted_scopes="true",
        response_type="code",
    )
    return f"{CREDENTIALS['auth_uri']}?{urlencode(params)}"


def redeem_token(code: str) -> Tuple[str, int, str]:
    r = requests.post(
        CREDENTIALS["token_uri"],
        json=dict(
            code=code,
            client_id=CREDENTIALS["client_id"],
            client_secret=CREDENTIALS["client_secret"],
            grant_type="authorization_code",
            redirect_uri=CREDENTIALS["redirect_uris"][0],
        ),
    )
    r.raise_for_status()
    data = r.json()
    return data["access_token"], data["expires_in"], data["refresh_token"]


def refresh_token(refresh_token: str) -> Tuple[str, int]:
    r = requests.post(
        CREDENTIALS["token_uri"],
        json=dict(
            refresh_token=refresh_token,
            client_id=CREDENTIALS["client_id"],
            client_secret=CREDENTIALS["client_secret"],
            grant_type="refresh_token",
        ),
    )
    r.raise_for_status()
    data = r.json()
    return data["access_token"], data["expires_in"]


def write_token(account: str, access_token: str, expires_in: int, refresh_token: str) -> None:
    path = CACHE / account
    expires_at = int(time.time()) + expires_in - 5
    content = dict(access_token=access_token, expires_at=expires_at, refresh_token=refresh_token)
    path.write_text(json.dumps(content))


if __name__ == "__main__":
    account = sys.argv[1]
    if (token_path := CACHE / account).is_file():
        existing_token = json.loads(token_path.read_text())
        if existing_token["expires_at"] < int(time.time()):
            access, expires_in = refresh_token(existing_token["refresh_token"])
            write_token(account, access, expires_in, existing_token["refresh_token"])
            print(access)
        else:
            print(existing_token["access_token"])
    else:
        print(auth_uri())
        code = input("enter authorization code > ")
        access, expires_in, refresh = redeem_token(code)
        write_token(account, access, expires_in, refresh)
        print(access)
